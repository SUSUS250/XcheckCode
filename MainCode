import asyncio
import websockets
import json
from datetime import datetime, timezone

SPT_ISSUER = "rswD8h8uzKPEUh26QKeWnxP2dR2HLkhCPm"
SPT_CURRENCY = "SPT"

def drops_to_xrp(drops):
    return int(drops) / 1_000_000

async def listen_spt_trades():
    url = "wss://xrplcluster.com"

    async with websockets.connect(url) as ws:
        await ws.send(json.dumps({
            "id": 1,
            "command": "subscribe",
            "streams": ["transactions"]
        }))

        print("üîç –°–ª—É—à–∞—é XRPL –¥–ª—è SPT-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...\n")

        while True:
            response = await ws.recv()
            data = json.loads(response)

            tx = data.get("transaction")
            meta = data.get("meta")

            if not tx or not meta or meta.get("TransactionResult") != "tesSUCCESS":
                continue

            delivered = meta.get("delivered_amount")
            if not isinstance(delivered, dict):
                continue

            if delivered.get("currency") == SPT_CURRENCY and delivered.get("issuer") == SPT_ISSUER:
                spt_amount = float(delivered.get("value"))
                sender = tx.get("Account")
                tx_hash = tx.get("hash")
                timestamp = tx.get("date")

                # ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
                tx_time = datetime.fromtimestamp(timestamp + 946684800, tz=timezone.utc).strftime('%Y-%m-%d %H:%M:%S UTC')

                xrp_spent = None
                if isinstance(tx.get("Amount"), str):
                    xrp_spent = drops_to_xrp(tx.get("Amount"))

                if not xrp_spent:
                    affected_nodes = meta.get("AffectedNodes", [])
                    for node in affected_nodes:
                        if "ModifiedNode" in node:
                            mod = node["ModifiedNode"]
                            if mod.get("LedgerEntryType") == "AccountRoot":
                                prev = mod.get("PreviousFields", {}).get("Balance")
                                final = mod.get("FinalFields", {}).get("Balance")
                                if prev and final:
                                    spent = int(prev) - int(final)
                                    if spent > 0:
                                        xrp_spent = drops_to_xrp(spent)
                                        break

                price = xrp_spent / spt_amount if xrp_spent else None

                print("‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∞ SPT:")
                print(f"‚Ä¢ –í—Ä–µ–º—è: {tx_time}")
                print(f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender}")
                print(f"‚Ä¢ –ö–æ–ª-–≤–æ –ø–æ–ª—É—á–µ–Ω–æ: {spt_amount} SPT")
                print(f"‚Ä¢ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {xrp_spent:.6f} XRP" if xrp_spent else "‚Ä¢ XRP –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ")
                print(f"‚Ä¢ –¶–µ–Ω–∞ –∑–∞ SPT: {price:.8f} XRP" if price else "‚Ä¢ –¶–µ–Ω–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")
                print(f"‚Ä¢ TxHash: {tx_hash}\n")

            await asyncio.sleep(0.05)

if __name__ == "__main__":
    asyncio.run(listen_spt_trades())
